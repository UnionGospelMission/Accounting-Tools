#!/usr/bin/env python
# -*- coding: ISO-8859-15 -*-
#
# generated by wxGlade 0.6.8 (standalone edition) on Tue Nov 12 08:00:40 2013
#

import wx,wx.grid,decimal,pyodbc,json

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

class Globals():
	def __init__(self):
		pass
Globals.settings={}
Globals.password=''
Globals.con=''
class DatabaseConnection(wx.Dialog):
	def __init__(self, *args, **kwds):
		kwds["style"] = wx.DEFAULT_DIALOG_STYLE
		wx.Dialog.__init__(self, *args, **kwds)
		self.label_1 = wx.StaticText(self, wx.ID_ANY, "Server")
		self.SERVER = wx.TextCtrl(self, wx.ID_ANY, "")
		self.label_2 = wx.StaticText(self, wx.ID_ANY, "Database")
		self.DATABASE = wx.TextCtrl(self, wx.ID_ANY, "")
		self.label_3 = wx.StaticText(self, wx.ID_ANY, "Username")
		self.USERNAME = wx.TextCtrl(self, wx.ID_ANY, "")
		self.label_4 = wx.StaticText(self, wx.ID_ANY, "Password")
		self.PASSWORD = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_PASSWORD)
		self.button_1 = wx.Button(self, wx.ID_ANY, "Connect")

		self.__set_properties()
		self.__do_layout()

		self.Bind(wx.EVT_TEXT, self.saveDatabase, self.SERVER)
		self.Bind(wx.EVT_TEXT, self.saveDatabase, self.DATABASE)
		self.Bind(wx.EVT_TEXT, self.saveDatabase, self.USERNAME)
		self.Bind(wx.EVT_TEXT, self.saveDatabase, self.PASSWORD)
		self.Bind(wx.EVT_BUTTON, self.onConnect, self.button_1)
		self.Bind(wx.EVT_CLOSE,self.onClose)
		self.success=False
		self.writesettings=True
		try:
			i=open('settings.txt','r')
			Globals.settings=json.loads(i.read())
			i.close()
			self.writesettings=False
			self.USERNAME.Value=Globals.settings['USERNAME']
			self.SERVER.Value=Globals.settings['SERVER']
			self.DATABASE.Value=Globals.settings['DATABASE']
			self.writesettings=True
		except IOError:
			pass

	def __set_properties(self):
		self.SetTitle("Connect to Database")
		self.SetSize((250, 150))

	def __do_layout(self):
		sizer_1 = wx.BoxSizer(wx.VERTICAL)
		sizer_2_copy_2 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_2_copy_1 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_2_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_2_copy_3 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_2.Add(self.label_1, 0, 0, 0)
		sizer_2.Add(self.SERVER, 1, wx.EXPAND, 0)
		sizer_1.Add(sizer_2, 0, wx.EXPAND, 0)
		sizer_2_copy.Add(self.label_2, 0, 0, 0)
		sizer_2_copy_3.Add(self.DATABASE, 1, wx.EXPAND, 0)
		sizer_2_copy.Add(sizer_2_copy_3, 1, wx.EXPAND, 0)
		sizer_1.Add(sizer_2_copy, 0, wx.EXPAND, 0)
		sizer_2_copy_1.Add(self.label_3, 0, 0, 0)
		sizer_2_copy_1.Add(self.USERNAME, 1, wx.EXPAND, 0)
		sizer_1.Add(sizer_2_copy_1, 0, wx.EXPAND, 0)
		sizer_2_copy_2.Add(self.label_4, 0, 0, 0)
		sizer_2_copy_2.Add(self.PASSWORD, 1, wx.EXPAND, 0)
		sizer_1.Add(sizer_2_copy_2, 0, wx.EXPAND, 0)
		sizer_1.Add(self.button_1, 0, 0, 0)
		self.SetSizer(sizer_1)
		self.Layout()
	
	def onClose(self,event=''):
		if self.success:
			self.Destroy()
		else:
			raise SystemExit

	def saveDatabase(self, event):
		if self.writesettings:
			Globals.password = self.PASSWORD.Value
			Globals.settings={'SERVER':self.SERVER.Value,'DATABASE':self.DATABASE.Value,'USERNAME':self.USERNAME.Value}
			o=open('settings.txt','w')
			o.write(json.dumps(Globals.settings))
			o.close()
		event.Skip()

	def onConnect(self, event):
		try:
			Globals.con = pyodbc.connect('DRIVER={SQL Server};SERVER=%s;DATABASE=%s;UID=%s;PWD=%s'%(Globals.settings['SERVER'],Globals.settings['DATABASE'],Globals.settings['USERNAME'],Globals.password))
			Globals.cur=Globals.con.cursor()
			self.success=True
			self.onClose()
		except pyodbc.Error:
			wx.MessageBox('Bad Connection','Connection Failed',wx.ICON_WARNING)
		event.Skip()


class Employees(wx.Frame):
	def __init__(self, *args, **kwds):
		# begin wxGlade: Employees.__init__
		kwds["style"] = wx.DEFAULT_FRAME_STYLE
		wx.Frame.__init__(self, *args, **kwds)
		self.panel_1 = wx.Panel(self, wx.ID_ANY)
		self.EMPSEARCH = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
		self.button_5 = wx.Button(self.panel_1, wx.ID_ANY, "Refresh Employee List")
		self.EMPSTATUS = wx.RadioBox(self.panel_1, wx.ID_ANY, "Employee Status", choices=["Active", "Inactive", "All"], majorDimension=3, style=wx.RA_SPECIFY_COLS)
		self.button_1 = wx.Button(self.panel_1, wx.ID_ANY, "Payout Vacation")
		self.VIEWER = wx.grid.Grid(self, wx.ID_ANY, size=(1, 1))

		self.__set_properties()
		self.__do_layout()

		self.Bind(wx.EVT_TEXT_ENTER, self.empSearch, self.EMPSEARCH)
		self.Bind(wx.EVT_BUTTON, self.refreshEmps, self.button_5)
		self.Bind(wx.EVT_BUTTON, self.payVacation, self.button_1)
		# end wxGlade
		dia = DatabaseConnection(None, -1, "",).ShowModal()
		self.Bind(wx.EVT_CLOSE, self.onClose)
		self.runsql = True
		self.empstatus = {0:'A',1:'I',2:'AI'}

	def __set_properties(self):
		# begin wxGlade: Employees.__set_properties
		self.SetTitle("Employee Search")
		self.SetSize((1336, 325))
		self.EMPSTATUS.SetSelection(0)
		self.VIEWER.CreateGrid(0, 11)
		self.VIEWER.SetRowLabelSize(0)
		self.VIEWER.SetColLabelValue(0, "EmpID")
		self.VIEWER.SetColLabelValue(1, "Status")
		self.VIEWER.SetColLabelValue(2, "Name")
		self.VIEWER.SetColLabelValue(3, "Department")
		self.VIEWER.SetColLabelValue(4, "Paygroup")
		self.VIEWER.SetColLabelValue(5, "Vac")
		self.VIEWER.SetColLabelValue(6, "Ill")
		self.VIEWER.SetColLabelValue(7, "Payrate")
		self.VIEWER.SetColLabelValue(8, "Salary")
		self.VIEWER.SetColLabelValue(9, "Pay Status")
		self.VIEWER.SetColLabelValue(10, "Start Date")
		# end wxGlade

	def __do_layout(self):
		# begin wxGlade: Employees.__do_layout
		sizer_7 = wx.BoxSizer(wx.VERTICAL)
		sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_8.Add(self.EMPSEARCH, 0, 0, 0)
		sizer_8.Add(self.button_5, 0, 0, 0)
		sizer_8.Add(self.EMPSTATUS, 0, 0, 0)
		sizer_8.Add(self.button_1, 0, 0, 0)
		self.panel_1.SetSizer(sizer_8)
		sizer_7.Add(self.panel_1, 0, wx.EXPAND, 0)
		sizer_7.Add(self.VIEWER, 1, wx.EXPAND, 0)
		self.SetSizer(sizer_7)
		self.Layout()
		# end wxGlade

	def onClose(self,event = ''):
		raise SystemExit

	def empSearch(self, event): # wxGlade: Employees.<event_handler>
		if self.runsql:
			self.empdict = {}
			#empdict = {empid:[status,name,dept,paygroup,vac,ill,payrate,salary,paystatus,startdate],...}
			self.runsql = False
			self.emplist = []
			empbendict = {}
			#empbendict = {empid:[sick,vac],...}
			'''
			lines = Main.issueSQLCommand("SELECT empid,bybegbal,bytdavail,bytdused,benid FROM BenEmp")
			'''
			lines=Globals.cur.execute("SELECT empid,bybegbal,bytdavail,bytdused,benid FROM BenEmp").fetchall()
			for i in lines:
				empid = i[0].strip()
				begbal = i[1]
				ytd = i[2]
				used = i[3]
				benid = i[4].strip()
				empbendict[empid] = empbendict.get(empid,[0.0,0.0])
				if 'SICK' in benid:
					empbendict[empid][0] = empbendict[empid][0] + float(begbal) + float(ytd) - float(used)
				elif 'VAC' in benid:
					empbendict[empid][1] = empbendict[empid][1] + float(begbal) + float(ytd) - float(used)
			'''
			lines = Main.issueSQLCommand("select strtdate,department,empid,Name,paygrpid,stdslry,stdunitrate,status from employee")
			'''
			lines=Globals.cur.execute("select strtdate,department,empid,Name,paygrpid,stdslry,stdunitrate,status from employee").fetchall()
			for i in lines:
				strt = str(i[0]).split(' ')[0]
				dept = i[1].strip()
				empid = i[2].strip()
				name = i[3].strip()
				paygroup = i[4].strip()
				salary = i[5]
				hourly = i[6]
				status = i[7].strip()
				mybenefits = empbendict.get(empid,[0.0,0.0])
				hrsal = ''
				if salary == 0.0:
					salary = float(hourly) * 2080
					hrsal = 'Hourly'
				elif hourly == 0.0:
					hourly = float(salary)/2080
					hrsal = 'Salary'
				self.empdict[empid] = [status,name,dept,paygroup,format(round(mybenefits[1],2),'.2f'),format(round(mybenefits[0],2),'.2f'),format(round(float(hourly),2),'.2f'),format(round(float(salary),2),'.2f'),hrsal,strt]
				if empid not in self.emplist:
					self.emplist.append(empid)
			self.emplist = sorted(self.emplist)
		for i in range(self.VIEWER.GetNumberRows()-1,-1,-1):
			self.VIEWER.DeleteRows()
		if ',' in self.EMPSEARCH.Value:
			mysearches = self.EMPSEARCH.Value.split(',')
		else:
			mysearches = [self.EMPSEARCH.Value]
		myfound = []
		for i in self.emplist:
			found = False
			for a in mysearches:
				if a.lower() in i:
					found = True
				else:
					for b in self.empdict[i]:
						if a.lower() in b.lower():
							found = True
			if found and self.empdict.get(i,['N'])[0] in self.empstatus[self.EMPSTATUS.GetSelection()]:
				myfound.append(i)
		for i in range(0,len(myfound)):
			self.VIEWER.AppendRows()
			self.VIEWER.SetCellValue(i,0,myfound[i])
			self.VIEWER.SetCellValue(i,1,str(self.empdict[myfound[i]][0]))
			self.VIEWER.SetCellValue(i,2,str(self.empdict[myfound[i]][1]))
			self.VIEWER.SetCellValue(i,3,str(self.empdict[myfound[i]][2]))
			self.VIEWER.SetCellValue(i,4,str(self.empdict[myfound[i]][3]))
			self.VIEWER.SetCellValue(i,5,str(self.empdict[myfound[i]][4]))
			self.VIEWER.SetCellValue(i,6,str(self.empdict[myfound[i]][5]))
			self.VIEWER.SetCellValue(i,7,str(self.empdict[myfound[i]][6]))
			self.VIEWER.SetCellValue(i,8,str(self.empdict[myfound[i]][7]))
			self.VIEWER.SetCellValue(i,9,str(self.empdict[myfound[i]][8]))
			self.VIEWER.SetCellValue(i,10,str(self.empdict[myfound[i]][9]))
		self.VIEWER.AutoSizeColumns()
		self.EMPSEARCH.Value = ''
		if event:
			event.Skip()

	def refreshEmps(self, event): # wxGlade: Employees.<event_handler>
		self.runsql = True
		event.Skip()

	def payVacation(self, event): # wxGlade: Employees.<event_handler>
		dia = VacPay(None, -1, "",).Show()
		event.Skip()

# end of class Employees

class VacPay(wx.Frame):
	def __init__(self, *args, **kwds):
		# begin wxGlade: VacPay.__init__
		kwds["style"] = wx.DEFAULT_FRAME_STYLE
		wx.Frame.__init__(self, *args, **kwds)
		self.label_3 = wx.StaticText(self, wx.ID_ANY, "Current\nPayroll")
		self.label_4 = wx.StaticText(self, wx.ID_ANY, "Total Hrs To Pay\n(Non Vacacation)")
		self.HOURS = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
		self.label_5 = wx.StaticText(self, wx.ID_ANY, "Total Accrued \nVac Hours")
		self.VACATION = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
		self.button_2 = wx.Button(self, wx.ID_ANY, "Refresh")
		self.SERVICE = wx.RadioBox(self, wx.ID_ANY, "Length of Service", choices=[""], majorDimension=9, style=wx.RA_SPECIFY_COLS)
		self.label_6 = wx.StaticText(self, wx.ID_ANY, "Result:")
		self.RESULT = wx.StaticText(self, wx.ID_ANY, "0")
		self.VIEWER = wx.grid.Grid(self, wx.ID_ANY, size=(1, 1))

		self.__set_properties()
		self.__do_layout()

		self.Bind(wx.EVT_TEXT_ENTER, self.calculateVac, self.HOURS)
		self.Bind(wx.EVT_TEXT, self.calculateVac, self.HOURS)
		self.Bind(wx.EVT_TEXT_ENTER, self.calculateVac, self.VACATION)
		self.Bind(wx.EVT_TEXT, self.calculateVac, self.VACATION)
		self.Bind(wx.EVT_BUTTON, self.refreshService, self.button_2)
		self.Bind(wx.EVT_RADIOBOX, self.calculateVac, self.SERVICE)
		self.Bind(wx.grid.EVT_GRID_CMD_CELL_CHANGE, self.changeVacation, self.VIEWER)
		# end wxGlade
		self.Bind(wx.EVT_CLOSE, self.onClose)
		self.reloadViewer()

	def __set_properties(self):
		# begin wxGlade: VacPay.__set_properties
		self.SetTitle("Vacation Payout")
		self.SetSize((979, 300))
		self.SetBackgroundColour(wx.Colour(240, 240, 240))
		self.label_3.SetFont(wx.Font(16, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "MS Shell Dlg 2"))
		self.SERVICE.SetSelection(0)
		self.label_6.SetFont(wx.Font(20, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "MS Shell Dlg 2"))
		self.RESULT.SetFont(wx.Font(20, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "MS Shell Dlg 2"))
		self.VIEWER.CreateGrid(1, 2)
		self.VIEWER.SetRowLabelSize(0)
		self.VIEWER.SetColLabelValue(0, "Category")
		self.VIEWER.SetColLabelValue(1, "Days of Vacation/Year")
		# end wxGlade

	def __do_layout(self):
		# begin wxGlade: VacPay.__do_layout
		sizer_1 = wx.BoxSizer(wx.VERTICAL)
		sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_4 = wx.BoxSizer(wx.VERTICAL)
		sizer_3 = wx.BoxSizer(wx.VERTICAL)
		sizer_2.Add(self.label_3, 0, 0, 0)
		sizer_2.Add((20, 20), 0, 0, 0)
		sizer_3.Add(self.label_4, 0, 0, 0)
		sizer_3.Add(self.HOURS, 0, 0, 0)
		sizer_2.Add(sizer_3, 0, wx.EXPAND, 0)
		sizer_2.Add((20, 20), 0, 0, 0)
		sizer_4.Add(self.label_5, 0, 0, 0)
		sizer_4.Add(self.VACATION, 0, 0, 0)
		sizer_2.Add(sizer_4, 0, wx.EXPAND, 0)
		sizer_2.Add((20, 20), 0, 0, 0)
		sizer_2.Add(self.button_2, 0, 0, 0)
		sizer_2.Add(self.SERVICE, 0, 0, 0)
		sizer_1.Add(sizer_2, 0, wx.EXPAND, 0)
		sizer_5.Add(self.label_6, 0, 0, 0)
		sizer_5.Add((20, 20), 0, 0, 0)
		sizer_5.Add(self.RESULT, 0, 0, 0)
		sizer_1.Add(sizer_5, 0, wx.EXPAND, 0)
		sizer_1.Add(self.VIEWER, 1, wx.EXPAND, 0)
		self.SetSizer(sizer_1)
		self.Layout()
		# end wxGlade
		self.sizer_2 = sizer_2

	def onClose(self,event = ''):
		if event:
			event.Skip()
		self.Destroy()

	def reloadViewer(self):
		for i in range(self.VIEWER.GetNumberRows()-1,-1,-1):
			self.VIEWER.DeleteRows()
		try:
			i=open('viewer.txt','r')
			lines=json.loads(i.read())
			i.close()
		except IOError:
			lines = []
		self.VIEWER.AppendRows()
		for i in range(0,len(lines)):
			if lines[i][0]:
				self.VIEWER.SetCellValue(i,0,lines[i][0])
				self.VIEWER.SetCellValue(i,1,lines[i][1])
				self.VIEWER.AppendRows()
		self.VIEWER.AutoSizeColumns()
		self.refreshService()

	def calculateVac(self, event): # wxGlade: VacPay.<event_handler>
		hoursdict = {}
		hold = self.SERVICE.GetSelection()
		self.reloadViewer()
		self.SERVICE.SetSelection(hold)
		for i in range(0,self.VIEWER.GetNumberRows()):
			if self.VIEWER.GetCellValue(i,0):
				hoursdict[i] = float(self.VIEWER.GetCellValue(i,1)) * 8 /2080
		accrualrate = hoursdict.get(self.SERVICE.GetSelection(),0.0)
		if self.HOURS.Value:
			hours = self.HOURS.Value
		else:
			hours = 0
		if self.VACATION.Value:
			vacation = self.VACATION.Value
		else:
			vacation = 0
		self.RESULT.Label = str(round((float(hours) + float(vacation)) * accrualrate + float(vacation),2))
		event.Skip()

	def changeVacation(self, event): # wxGlade: VacPay.<event_handler>
		mylist = []
		for i in range(0,self.VIEWER.GetNumberRows()):
			mylist.append([self.VIEWER.GetCellValue(i,0),self.VIEWER.GetCellValue(i,1)])
		o=open('viewer.txt','w')
		o.write(json.dumps(mylist))
		o.close()
		if self.VIEWER.GetCellValue(self.VIEWER.GetNumberRows()-1,0):
			self.VIEWER.AppendRows()
		self.refreshService()
		event.Skip()

	def refreshService(self, event=''): # wxGlade: VacPay.<event_handler>
		choices = []
		for i in range(0,self.VIEWER.GetNumberRows()):
			if self.VIEWER.GetCellValue(i,0):
				choices.append(self.VIEWER.GetCellValue(i,0))
		if choices != []:
			self.sizer_2.Detach(self.SERVICE)
			self.SERVICE.Destroy()
			self.SERVICE = ''
			self.SERVICE = wx.RadioBox(self, -1, "Length of Service", choices=choices, majorDimension=len(choices), style=wx.RA_SPECIFY_COLS)
			self.sizer_2.Add(self.SERVICE, 0, 0, 0)
			self.Layout()
			self.Bind(wx.EVT_RADIOBOX, self.calculateVac, self.SERVICE)
		if event:
			event.Skip()

# end of class VacPay
if __name__ == "__main__":
	app = wx.PySimpleApp(0)
	wx.InitAllImageHandlers()
	Employees = Employees(None, wx.ID_ANY, "")
	app.SetTopWindow(Employees)
	Employees.Show()
	app.MainLoop()
