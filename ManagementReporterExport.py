#!/usr/bin/env python
# -*- coding: CP1252 -*-
#
# generated by wxGlade 0.6.8 (standalone edition) on Wed May 20 14:18:05 2015
#

import wx, wx.grid, openpyxl, json, calendar, datetime, os, smtplib, pyodbc, socket, win32com.client

from email.MIMEMultipart import MIMEMultipart
from email.MIMEBase import MIMEBase
from email.mime.text import MIMEText
from email import Encoders
from email.utils import formatdate

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

def strToList(string):
    if ',' in string:
        return string.split(',')
    elif ';' in string:
		return string.split(';')
    else:
        return [string]


class EmailConnection(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: EmailConnection.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.label_4 = wx.StaticText(self, wx.ID_ANY, "Email Server")
        self.EMAILSERVER = wx.TextCtrl(self, wx.ID_ANY, "")
        self.label_4_copy = wx.StaticText(self, wx.ID_ANY, "Email Username")
        self.EMAILUSERNAME = wx.TextCtrl(self, wx.ID_ANY, "")
        self.label_4_copy_1 = wx.StaticText(self, wx.ID_ANY, "Email Password")
        self.EMAILPASSWORD = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER | wx.TE_PASSWORD)
        self.label_5 = wx.StaticText(self, wx.ID_ANY, "Return Email")
        self.EMAILRETURN = wx.TextCtrl(self, wx.ID_ANY, "")
        self.button_5 = wx.Button(self, wx.ID_ANY, "OK")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_TEXT, self.saveServer, self.EMAILSERVER)
        self.Bind(wx.EVT_TEXT, self.saveUsername, self.EMAILUSERNAME)
        self.Bind(wx.EVT_TEXT_ENTER, self.testEmail, self.EMAILPASSWORD)
        self.Bind(wx.EVT_TEXT, self.saveReturn, self.EMAILRETURN)
        self.Bind(wx.EVT_BUTTON, self.testEmail, self.button_5)
        # end wxGlade
        self.EMAILSERVER.Value = Globals.settings.get('EMAILSERVER','')
        self.EMAILUSERNAME.Value = Globals.settings.get('EMAILUSERNAME','')
        self.EMAILRETURN.Value = Globals.settings.get('EMAILRETURN','')

    def __set_properties(self):
        # begin wxGlade: EmailConnection.__set_properties
        self.SetTitle("Email Connection")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: EmailConnection.__do_layout
        sizer_14 = wx.BoxSizer(wx.VERTICAL)
        sizer_13 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_12_copy_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_12_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_12 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_12.Add(self.label_4, 0, 0, 0)
        sizer_12.Add(self.EMAILSERVER, 0, 0, 0)
        sizer_14.Add(sizer_12, 0, wx.EXPAND, 0)
        sizer_12_copy.Add(self.label_4_copy, 0, 0, 0)
        sizer_12_copy.Add(self.EMAILUSERNAME, 0, 0, 0)
        sizer_14.Add(sizer_12_copy, 0, wx.EXPAND, 0)
        sizer_12_copy_1.Add(self.label_4_copy_1, 0, 0, 0)
        sizer_12_copy_1.Add(self.EMAILPASSWORD, 0, 0, 0)
        sizer_14.Add(sizer_12_copy_1, 0, wx.EXPAND, 0)
        sizer_13.Add(self.label_5, 0, 0, 0)
        sizer_13.Add(self.EMAILRETURN, 0, 0, 0)
        sizer_14.Add(sizer_13, 0, wx.EXPAND, 0)
        sizer_14.Add(self.button_5, 0, 0, 0)
        self.SetSizer(sizer_14)
        sizer_14.Fit(self)
        self.Layout()
        # end wxGlade

    def saveServer(self, event):  # wxGlade: EmailConnection.<event_handler>
        Globals.settings['EMAILSERVER']=self.EMAILSERVER.Value
        Globals.saveSettings()
        event.Skip()

    def saveUsername(self, event):  # wxGlade: EmailConnection.<event_handler>
        Globals.settings['EMAILUSERNAME']=self.EMAILUSERNAME.Value
        Globals.saveSettings()
        event.Skip()

    def saveReturn(self, event):  # wxGlade: EmailConnection.<event_handler>
        Globals.settings['EMAILRETURN']=self.EMAILRETURN.Value
        Globals.saveSettings()
        event.Skip()

    def testEmail(self, event):  # wxGlade: EmailConnection.<event_handler>
        try:
            server = smtplib.SMTP(self.EMAILSERVER.Value)
        except (socket.gaierror, socket.error):
            Globals.warnUser('Connection to email server failed')
            return
        server.starttls()
        try:
            server.login(self.EMAILUSERNAME.Value,self.EMAILPASSWORD.Value)
        except smtplib.SMTPAuthenticationError:
            Globals.warnUser('Invalid Login')
            server.close()
            return
        return_test = server.docmd('mail from:',self.EMAILRETURN.Value)
        if return_test[0] == 501:
            Globals.warnUser('Invalid Return Address')
            server.close()
            return
        server.close()
        Globals.email_password = self.EMAILPASSWORD.Value
        self.Destroy()
        event.Skip()

# end of class EmailConnection
class Globals():
    def __init__(self):
        self.loadSettings()
        self.monthToName = lambda x: {1:'January',2:'February',3:'March',4:'April',5:'May',6:'June',7:'July',8:'August',9:'September',10:'October',11:'November',12:'December'}[x]
        self.savesettings=True
        self.email_password = ''
        self.cur = ''

    
    def saveSettings(self):
        if self.savesettings:
            o=open('settings.txt','w')
            o.write(json.dumps(self.settings))
            o.close()
    
    def loadSettings(self):
        try:
            i=open('settings.txt')
            self.settings = json.loads(i.read())
            i.close()
        except IOError:
            self.settings={}
        
    def dateToPeriod(self,date):
        fiscalstart = 9
        year = date.Year
        month = date.Month + 1
        if month >= fiscalstart:
            year = year + 1
            month = month + 1 - fiscalstart
        else:
            month = 13 - fiscalstart + month
        return '%s%s'%(str(year),format(month,'02d'))
        
    def warnUser(self,message,heading = 'Warning',icon = wx.ICON_WARNING):
        wx.MessageBox(message,heading,icon)
        
    def writeFile(self,sheetname,exportgrid,filepath=''):
        if len(sheetname) > 30:
            sheetname = sheetname[:31]
        go = True
        if not filepath:
            dia = wx.FileDialog(None,message = "Select Output File", wildcard = 'MS Excell 2010 (*.xlsx)|*.xlsx|All files (*.*)|*.*', style = wx.SAVE|wx.OVERWRITE_PROMPT)
            if dia.ShowModal() == wx.ID_OK:
                filepath = dia.GetPaths()[0]
            else:
                self.warnUser('No output file selected')
                go = False
        if go:
            wb = openpyxl.workbook.Workbook()
            ws=wb.worksheets[0]
            ws.title = sheetname
            for i in range(0,exportgrid.GetNumberRows()):
                for a in range(0,exportgrid.GetNumberCols()):
                    ws.cell('%s%s'%(chr(a+97),i+1)).value = exportgrid.GetCellValue(i,a)
            try:
                wb.save(filename = filepath)
            except IOError:
                self.warnUser('Output File %s Open\n  Close file and try again'%filepath)
                
    def sendEmail(self,addresses,attachments=[],translation={},autosend = False):
        server = smtplib.SMTP(self.settings.get('EMAILSERVER',''))
        server.starttls()
        username = self.settings.get('EMAILUSERNAME','')
        password = self.email_password
        server.login(username,password)
        subject = self.settings.get('SUBJECT','')
        body = self.settings.get('BODY','')
        for a,b in translation.iteritems():
            subject = subject.replace(a,str(b))
            body = body.replace(a,str(b))
        #subject = subject.replace('&','and').replace(' ','%20').replace('\n','%0A').replace(',','%2C')
        #body = body.replace('&','and').replace(' ','%20').replace('\n','%0A').replace(',','%2C')
        message = MIMEMultipart()
        message['From'] = self.settings.get('EMAILRETURN','')
        message['To'] = ', '.join(addresses)
        message['Date'] = formatdate(localtime=True)
        message['Subject'] = subject
        message.attach(MIMEText(body))
        for each_file in attachments:
            attachment = MIMEBase('application', "octet-stream")
            attachment.set_payload(open(each_file,'rb').read())
            Encoders.encode_base64(attachment)
            attachment.add_header('Content-Disposition', 'attachment; filename="%s"'%os.path.basename(each_file))
            message.attach(attachment)
        server.sendmail(self.settings.get('EMAILRETURN',''),addresses,message.as_string())
        server.close()
        

class StandardDate():
    def __init__(self,year,month,day):
        self.Year = year
        self.Month = month
        self.Day = day        
        
Globals=Globals()


class DatabaseConnection(wx.Dialog):
    def __init__(self, *args, **kwds):
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.label_1 = wx.StaticText(self, wx.ID_ANY, "Server")
        self.SERVER = wx.TextCtrl(self, wx.ID_ANY, "")
        self.label_2 = wx.StaticText(self, wx.ID_ANY, "Database")
        self.DATABASE = wx.TextCtrl(self, wx.ID_ANY, "")
        self.label_3 = wx.StaticText(self, wx.ID_ANY, "Username")
        self.USERNAME = wx.TextCtrl(self, wx.ID_ANY, "")
        self.label_4 = wx.StaticText(self, wx.ID_ANY, "Password")
        self.PASSWORD = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER | wx.TE_PASSWORD)
        self.button_1 = wx.Button(self, wx.ID_ANY, "Connect")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_TEXT, self.saveDatabase, self.SERVER)
        self.Bind(wx.EVT_TEXT, self.saveDatabase, self.DATABASE)
        self.Bind(wx.EVT_TEXT, self.saveDatabase, self.USERNAME)
        self.Bind(wx.EVT_TEXT, self.saveDatabase, self.PASSWORD)
        self.Bind(wx.EVT_TEXT_ENTER, self.onConnect, self.PASSWORD)
        self.Bind(wx.EVT_BUTTON, self.onConnect, self.button_1)
        self.Bind(wx.EVT_CLOSE,self.onClose)
        self.success=False
        self.writesettings=False
        self.USERNAME.Value=Globals.settings.get('USERNAME','')
        self.SERVER.Value=Globals.settings.get('SERVER','')
        self.DATABASE.Value=Globals.settings.get('DATABASE','')
        self.writesettings=True

    def __set_properties(self):
        self.SetTitle("Connect to Database")
        self.SetSize((250, 150))

    def __do_layout(self):
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2_copy_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2_copy_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2_copy_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(self.label_1, 0, 0, 0)
        sizer_2.Add(self.SERVER, 1, wx.EXPAND, 0)
        sizer_1.Add(sizer_2, 0, wx.EXPAND, 0)
        sizer_2_copy.Add(self.label_2, 0, 0, 0)
        sizer_2_copy_3.Add(self.DATABASE, 1, wx.EXPAND, 0)
        sizer_2_copy.Add(sizer_2_copy_3, 1, wx.EXPAND, 0)
        sizer_1.Add(sizer_2_copy, 0, wx.EXPAND, 0)
        sizer_2_copy_1.Add(self.label_3, 0, 0, 0)
        sizer_2_copy_1.Add(self.USERNAME, 1, wx.EXPAND, 0)
        sizer_1.Add(sizer_2_copy_1, 0, wx.EXPAND, 0)
        sizer_2_copy_2.Add(self.label_4, 0, 0, 0)
        sizer_2_copy_2.Add(self.PASSWORD, 1, wx.EXPAND, 0)
        sizer_1.Add(sizer_2_copy_2, 0, wx.EXPAND, 0)
        sizer_1.Add(self.button_1, 0, 0, 0)
        self.SetSizer(sizer_1)
        self.Layout()
    
    def onClose(self,event=''):
        self.Destroy()

    def saveDatabase(self, event):
        if self.writesettings:
            Globals.password = self.PASSWORD.Value
            Globals.settings['SERVER']=self.SERVER.Value
            Globals.settings['DATABASE']=self.DATABASE.Value
            Globals.settings['USERNAME']=self.USERNAME.Value
            Globals.saveSettings()
        event.Skip()

    def onConnect(self, event):
        try:
            Globals.con = pyodbc.connect('DRIVER={SQL Server};SERVER=%s;DATABASE=%s;UID=%s;PWD=%s'%(self.SERVER.Value,self.DATABASE.Value,self.USERNAME.Value,self.PASSWORD.Value))
            Globals.cur=Globals.con.cursor()
            self.success=True
            self.onClose()
        except pyodbc.Error:
            wx.MessageBox('Bad Connection','Connection Failed',wx.ICON_WARNING)
        event.Skip()


class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_2 = wx.Panel(self, wx.ID_ANY)
        self.label_1 = wx.StaticText(self.panel_2, wx.ID_ANY, "Set Date")
        self.DATE = wx.DatePickerCtrl(self.panel_2, wx.ID_ANY, style=wx.DP_DROPDOWN)
        self.DETAIL = wx.CheckBox(self.panel_2, wx.ID_ANY, "Generate Detail")
        self.EMAIL = wx.CheckBox(self.panel_2, wx.ID_ANY, "Generate Email")
        self.button_1 = wx.Button(self.panel_2, wx.ID_ANY, "Set Report File")
        self.TARGETFILE = wx.StaticText(self.panel_2, wx.ID_ANY, "")
        self.button_2 = wx.Button(self.panel_2, wx.ID_ANY, "Set Output Path")
        self.OUTPUTPATH = wx.StaticText(self.panel_2, wx.ID_ANY, "")
        self.button_3 = wx.Button(self.panel_2, wx.ID_ANY, "Distribute")
        self.button_4 = wx.Button(self.panel_2, wx.ID_ANY, "Refresh Grid")
        self.panel_1 = wx.Panel(self, wx.ID_ANY)
        self.label_2 = wx.StaticText(self.panel_1, wx.ID_ANY, "Email Subject")
        self.SUBJECT = wx.TextCtrl(self.panel_1, wx.ID_ANY, "")
        self.label_3 = wx.StaticText(self.panel_1, wx.ID_ANY, "Email Body")
        self.BODY = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_MULTILINE)
        self.VIEWER = wx.grid.Grid(self, wx.ID_ANY, size=(1, 1))

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_CHECKBOX, self.checkDetail, self.DETAIL)
        self.Bind(wx.EVT_CHECKBOX, self.checkEmail, self.EMAIL)
        self.Bind(wx.EVT_BUTTON, self.setFile, self.button_1)
        self.Bind(wx.EVT_BUTTON, self.setOutput, self.button_2)
        self.Bind(wx.EVT_BUTTON, self.distributeReports, self.button_3)
        self.Bind(wx.EVT_BUTTON, self.refreshGrid, self.button_4)
        self.Bind(wx.EVT_TEXT, self.saveSubject, self.SUBJECT)
        self.Bind(wx.EVT_TEXT, self.saveBody, self.BODY)
        self.Bind(wx.grid.EVT_GRID_CMD_CELL_CHANGE, self.saveViewer, self.VIEWER)
        # end wxGlade
        self.OUTPUTPATH.Label = Globals.settings.get('OUTPUTPATH','')
        self.BODY.Value = Globals.settings.get('BODY','')
        self.SUBJECT.Value = Globals.settings.get('SUBJECT','')
        self.recur = False
        self.refreshGrid()

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("Management Report Distributer")
        self.SetSize((1075, 580))
        self.VIEWER.CreateGrid(1, 7)
        self.VIEWER.SetColLabelValue(0, "Worksheet")
        self.VIEWER.SetColLabelValue(1, "Dept Name")
        self.VIEWER.SetColLabelValue(2, "Sub Accts")
        self.VIEWER.SetColLabelValue(3, "Dept Head")
        self.VIEWER.SetColLabelValue(4, "Email")
        self.VIEWER.SetColLabelValue(5, "File In")
        self.VIEWER.SetColLabelValue(6, "Sub Folders")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_11 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_5 = wx.BoxSizer(wx.VERTICAL)
        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_10 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_9 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_8.Add(self.label_1, 0, 0, 0)
        sizer_8.Add(self.DATE, 0, 0, 0)
        sizer_5.Add(sizer_8, 1, wx.EXPAND, 0)
        sizer_6.Add(self.DETAIL, 0, 0, 0)
        sizer_6.Add(self.EMAIL, 0, 0, 0)
        sizer_5.Add(sizer_6, 1, wx.EXPAND, 0)
        sizer_9.Add(self.button_1, 0, 0, 0)
        sizer_9.Add(self.TARGETFILE, 0, 0, 0)
        sizer_5.Add(sizer_9, 1, wx.EXPAND, 0)
        sizer_10.Add(self.button_2, 0, 0, 0)
        sizer_10.Add(self.OUTPUTPATH, 0, 0, 0)
        sizer_5.Add(sizer_10, 1, wx.EXPAND, 0)
        sizer_7.Add(self.button_3, 0, 0, 0)
        sizer_7.Add(self.button_4, 0, 0, 0)
        sizer_5.Add(sizer_7, 1, wx.EXPAND, 0)
        self.panel_2.SetSizer(sizer_5)
        sizer_4.Add(self.panel_2, 1, wx.EXPAND, 0)
        sizer_2.Add(self.label_2, 0, 0, 0)
        sizer_2.Add(self.SUBJECT, 0, wx.EXPAND, 0)
        sizer_2.Add(self.label_3, 0, 0, 0)
        sizer_2.Add(self.BODY, 1, wx.EXPAND, 0)
        self.panel_1.SetSizer(sizer_2)
        sizer_4.Add(self.panel_1, 2, wx.EXPAND, 0)
        sizer_3.Add(sizer_4, 1, wx.EXPAND, 0)
        sizer_11.Add(self.VIEWER, 3, wx.EXPAND, 0)
        sizer_3.Add(sizer_11, 2, wx.EXPAND, 0)
        self.SetSizer(sizer_3)
        self.Layout()
        # end wxGlade

    def warnUser(self,message,heading = 'Warning',icon = wx.ICON_WARNING):
        wx.MessageBox(message,heading,icon)

    def setFile(self, event):  # wxGlade: MyFrame.<event_handler>
        dia = wx.FileDialog(None,message = "Select Input File", wildcard = 'MS Excell 2010 (*.xlsx)|*.xlsx|All files (*.*)|*.*', style = wx.OPEN)
        if dia.ShowModal() == wx.ID_OK:
            filepath = dia.GetPaths()[0]
            self.TARGETFILE.Label = filepath
            Globals.settings['TARGETFILE'] = filepath
            Globals.saveSettings()
        else:
            self.warnUser('No input file selected')
        event.Skip()

    def setOutput(self, event):  # wxGlade: MyFrame.<event_handler>
        dia = wx.DirDialog(None,message = "Find Current Year Accounting Directory", style = wx.OPEN)
        if dia.ShowModal() == wx.ID_OK:
            self.OUTPUTPATH.Label = dia.GetPath()
            Globals.settings['OUTPUTPATH']=self.OUTPUTPATH.Label
            Globals.saveSettings()
        event.Skip()

    def distributeReports(self, event):  # wxGlade: MyFrame.<event_handler>
        if not self.TARGETFILE.Label:
            Globals.warnUser('select target file')
            return
        my_month_name = Globals.monthToName(self.DATE.Value.Month+1)
        previous_month = datetime.datetime.now().replace(day=1) - datetime.timedelta(days=1)
        if datetime.datetime.strptime(str(self.DATE.Value), '%m/%d/%y %H:%M:%S') > previous_month:
            Globals.warnUser('Exporter set to current month')
            return
        my_department_dict = {}
        #my_department_dict = {department:[[sub accts], [dept heads], [emails], [file locations], [files]]}
        excel_file = win32com.client.Dispatch("Excel.Application")
        excel_file.DisplayAlerts = False
        excel_workbook = excel_file.Workbooks.Open(self.TARGETFILE.Label)
        excel_workbook.Save()
        excel_workbook.Close(SaveChanges=True)
        excel_file.Quit()
        my_target_file = openpyxl.load_workbook(filename = self.TARGETFILE.Label)
        worksheet_count = 0
        total_status_dialog = wx.ProgressDialog ( 'Progress', 'Processing Reports', maximum = len(my_target_file.worksheets), style = wx.PD_ELAPSED_TIME | wx.PD_REMAINING_TIME|wx.STAY_ON_TOP)
        for my_worksheet in my_target_file.worksheets:
            total_status_dialog.Update(worksheet_count, "On %s's Reports."%my_worksheet.title)
            worksheet_count += 1
            # Retrieve instructions from the viewer
            my_instructions = Globals.settings.get('VIEWER',{}).get(my_worksheet.title,'')
            if not my_instructions:
                Globals.warnUser('Missing instructions for %s'%my_worksheet.title)
                continue
            # Initialize department in the department dictionary
            my_department_dict[my_instructions[0]] = my_department_dict.get(my_instructions[0],[[],[],[],[],[]])

            # Initialize destination workbook
            wb = openpyxl.Workbook()
            
            # Transfer Worksheet
            wb.worksheets[0] = my_worksheet
            
            # Build and create filepath
            filename = '%s\\%s'%(self.OUTPUTPATH.Label,my_instructions[4])
            if not os.path.isdir(filename):
                os.mkdir(filename)
            filename = '%s%s'%(filename,{'':''}.get(my_instructions[5],'\\%s'%my_month_name))
            if not os.path.isdir(filename):
                os.mkdir(filename)
            # Add filepath to department dictionary
            if filename not in my_department_dict[my_instructions[0]][3]:
                my_department_dict[my_instructions[0]][3].append(filename)
            # Add file to path
            filename = '%s\\%s.xlsx'%(filename,'%s %s %s'%(my_worksheet.title, my_month_name, self.DATE.Value.Year))
            # Save new file to filename
            wb.save(filename=filename)
            # Add file name to department dictionary
            if filename not in my_department_dict[my_instructions[0]][4]:
                my_department_dict[my_instructions[0]][4].append(filename)
            
            # Finish building department dictionary
            current_subs = strToList(my_instructions[1])
            for each_sub in current_subs:
                if each_sub not in my_department_dict[my_instructions[0]][0]:
                    my_department_dict[my_instructions[0]][0].append(each_sub)
            current_dept_heads = strToList(my_instructions[2])
            for each_head in current_dept_heads:
                if each_head not in my_department_dict[my_instructions[0]][1]:
                    my_department_dict[my_instructions[0]][1].append(each_head)
            current_emails = strToList(my_instructions[3])
            for each_email in current_emails:
                if each_email not in my_department_dict[my_instructions[0]][2]:
                    my_department_dict[my_instructions[0]][2].append(each_email)
        total_status_dialog.Destroy()
                    
        if self.DETAIL.Value:
            # Build name reference dictionaries
            acct_name_dict = {}
            #acct_name_dict = {acct_number:acct_name}
            accounts = Globals.cur.execute("SELECT acct,descr FROM account").fetchall()
            for account in accounts:
                acct_name_dict[account[0].strip()] = account[1].strip()
            sub_name_dict = {}
            #sub_name_dict = {sub:sub_name}
            subs = Globals.cur.execute("SELECT sub,descr FROM subacct").fetchall()
            for sub in subs:
                sub_name_dict[sub[0].strip()] = sub[1].strip()
            my_period = Globals.dateToPeriod(self.DATE.Value)
            
            department_count = 0
            total_status_dialog = wx.ProgressDialog ( 'Progress', 'Processing Detail Reports', maximum = len(my_department_dict), style = wx.PD_ELAPSED_TIME | wx.PD_REMAINING_TIME|wx.STAY_ON_TOP)
            for each_department,department_list in my_department_dict.iteritems():
                total_status_dialog.Update(department_count, "On %s's Reports."%each_department)
                department_count += 1
                # Build reference dictionary for each department
                detail_dict = {}
                #detail_dict = {sub:[[acct1,acct2,...],{acct:[[trandate,trandesc,dramt,cramt],...],...}],...}
                current_subs = sorted(department_list[0])
                for sub in current_subs:
                    detail_dict[sub] = detail_dict.get(sub,[[],{}])
                    current_trans = Globals.cur.execute("SELECT acct,dramt,cramt,trandate,trandesc FROM gltran WHERE perpost='%s' AND sub='%s'"%(my_period,sub.replace('-',''))).fetchall()
                    for tran in current_trans:
                        acct = tran[0].strip()
                        dramt = tran[1]
                        cramt = tran[2]
                        trandate = str(tran[3]).strip().split(' ')[0]
                        trandesc = tran[4].strip()
                        detail_dict[sub][1][acct] = detail_dict[sub][1].get(acct,[])
                        detail_dict[sub][1][acct].append([trandate,trandesc,dramt,cramt])
                        if acct not in detail_dict[sub][0]:
                            detail_dict[sub][0].append(acct)
                
                # Build workbook for each department
                outputlist = wx.grid.Grid(self, -1, size=(1, 1))
                outputlist.CreateGrid(0, 7)
                outputlist.AppendRows()
                outputlist.SetCellValue(0,0,'%s Detail Report'%each_department)
                outputlist.AppendRows()
                outputlist.SetCellValue(1,0,'Department')
                outputlist.SetCellValue(1,1,'Account')
                outputlist.SetCellValue(1,2,'Date')
                outputlist.SetCellValue(1,3,'Description')
                outputlist.SetCellValue(1,4,'Debit')
                outputlist.SetCellValue(1,5,'Credit')
                outputlist.SetCellValue(1,6,'Total')
                for sub in current_subs:
                    if sub:
                        outputlist.AppendRows()
                        outputlist.SetCellValue(outputlist.GetNumberRows()-1,0,sub_name_dict[sub.replace('-','')])
                        detail_dict[sub][0] = sorted(detail_dict[sub][0])
                        for acct in detail_dict[sub][0]:
                            outputlist.AppendRows()
                            outputlist.SetCellValue(outputlist.GetNumberRows()-1,1,acct_name_dict[acct.replace('-','')])
                            my_total = 0.0
                            for tran in detail_dict[sub][1][acct]:
                                outputlist.AppendRows()
                                outputlist.SetCellValue(outputlist.GetNumberRows()-1,2,tran[0])
                                outputlist.SetCellValue(outputlist.GetNumberRows()-1,3,tran[1])
                                outputlist.SetCellValue(outputlist.GetNumberRows()-1,4,str(tran[2]))
                                outputlist.SetCellValue(outputlist.GetNumberRows()-1,5,str(tran[3]))
                                my_total = my_total + float(tran[2]) - float(tran[3])
                                if detail_dict[sub][1][acct].index(tran) == len(detail_dict[sub][1][acct])-1:
                                    outputlist.SetCellValue(outputlist.GetNumberRows()-1,6,str(my_total))
                
                # Save workbook to all file locations
                for i in range(0,len(department_list[3])):
                    current_file_loc = department_list[3][i]
                    filename = '%s\\%s %s %s Detail.xlsx'%(current_file_loc,each_department,my_month_name,self.DATE.Value.Year)
                    Globals.writeFile('Detail Report %s'%each_department,outputlist,filename)
                    if i == 0:
                        department_list[4].append(filename)
            total_status_dialog.Destroy()
            
        if self.EMAIL.Value:
            email_count = 0
            total_status_dialog = wx.ProgressDialog ( 'Progress', 'Processing Emails', maximum = len(my_department_dict), style = wx.PD_ELAPSED_TIME | wx.PD_REMAINING_TIME|wx.STAY_ON_TOP)
            for each_department,department_list in my_department_dict.iteritems():
                total_status_dialog.Update(email_count, "On %s's Email."%each_department)
                email_count += 1
                #my_department_dict = {department:[[sub accts], [dept heads], [emails], [file locations], [files]]}
                if department_list[2] != []:
                    translation = {'|HEAD|':' and '.join(department_list[1]),
                                    '|DATE|':'%s %s'%(my_month_name,self.DATE.Value.Year),
                                    '|MONTH|':my_month_name,
                                    '|YEAR|':self.DATE.Value.Year
                                    }
                    Globals.sendEmail(department_list[2],department_list[4],translation)
                    #Globals.sendEmail(self.EMAILPASSWORD.Value,department_list[2],department_list[4],translation)
            total_status_dialog.Destroy()
        event.Skip()

    def refreshGrid(self, event=None):  # wxGlade: MyFrame.<event_handler>
        mylist = Globals.settings.get('VIEWER',{})
        if mylist!={}:
            for i in range(self.VIEWER.GetNumberRows()-1,-1,-1):
                self.VIEWER.DeleteRows()
            for i,v in mylist.iteritems():
                self.VIEWER.AppendRows()
                self.VIEWER.SetCellValue(self.VIEWER.GetNumberRows()-1,0,i)
                self.VIEWER.SetCellValue(self.VIEWER.GetNumberRows()-1,1,v[0])
                self.VIEWER.SetCellValue(self.VIEWER.GetNumberRows()-1,2,v[1])
                self.VIEWER.SetCellValue(self.VIEWER.GetNumberRows()-1,3,v[2])
                self.VIEWER.SetCellValue(self.VIEWER.GetNumberRows()-1,4,v[3])
                self.VIEWER.SetCellValue(self.VIEWER.GetNumberRows()-1,5,v[4])
                self.VIEWER.SetCellValue(self.VIEWER.GetNumberRows()-1,6,v[5])
            self.VIEWER.AppendRows()
        self.VIEWER.AutoSizeColumns()
        if event:
            event.Skip()

    def saveSubject(self, event):  # wxGlade: MyFrame.<event_handler>
        Globals.settings['SUBJECT']=self.SUBJECT.Value
        Globals.saveSettings()
        event.Skip()

    def saveBody(self, event):  # wxGlade: MyFrame.<event_handler>
        Globals.settings['BODY']=self.BODY.Value
        Globals.saveSettings()
        event.Skip()

    def saveViewer(self, event):  # wxGlade: MyFrame.<event_handler>
        if not self.recur:
            mydict = {}
            for i in range(self.VIEWER.GetNumberRows()):
                if self.VIEWER.GetCellValue(i,0) != '' or self.VIEWER.GetCellValue(i,1) != '' or self.VIEWER.GetCellValue(i,2) != '' or self.VIEWER.GetCellValue(i,3) != '' or self.VIEWER.GetCellValue(i,4) != '' or self.VIEWER.GetCellValue(i,5) != '' or self.VIEWER.GetCellValue(i,6) != '':
                    mydict[self.VIEWER.GetCellValue(i,0)] = [self.VIEWER.GetCellValue(i,1),self.VIEWER.GetCellValue(i,2),self.VIEWER.GetCellValue(i,3),self.VIEWER.GetCellValue(i,4),self.VIEWER.GetCellValue(i,5),self.VIEWER.GetCellValue(i,6)]
                    if i+1 == self.VIEWER.GetNumberRows():
                        self.VIEWER.AppendRows()
            Globals.settings['VIEWER']=mydict
            Globals.saveSettings()
            self.recur = True
            self.VIEWER.AutoSizeColumns()
            self.recur = False
        event.Skip()
        
    def checkEmail(self, event):  # wxGlade: MyFrame.<event_handler>
        if not Globals.email_password:
            dia = EmailConnection(None, -1, "",).ShowModal()
        if not Globals.email_password:
            self.EMAIL.Value = False
        event.Skip()

    def checkDetail(self, event):  # wxGlade: MyFrame.<event_handler>
        if not Globals.cur:
            dia = DatabaseConnection(None, -1, "",).ShowModal()
        if not Globals.cur:
            self.DETAIL.Value = False
        event.Skip()
# end of class MyFrame

if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = MyFrame(None, wx.ID_ANY, "")
    app.SetTopWindow(frame_1)
    frame_1.Show()
    app.MainLoop()
